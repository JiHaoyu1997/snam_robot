# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vpa_robot_vision/CrossInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CrossInfo(genpy.Message):
  _md5sum = "abc28f0d82de76aab08a8f05250b1372"
  _type = "vpa_robot_vision/CrossInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string robot_name         # Name of the robot
bool cross                # Indicates if the robot has crossed
int8 last_inter_id       # ID of the last intersection
int8 local_inter_id      # ID of the current (local) intersection
"""
  __slots__ = ['robot_name','cross','last_inter_id','local_inter_id']
  _slot_types = ['string','bool','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_name,cross,last_inter_id,local_inter_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CrossInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_name is None:
        self.robot_name = ''
      if self.cross is None:
        self.cross = False
      if self.last_inter_id is None:
        self.last_inter_id = 0
      if self.local_inter_id is None:
        self.local_inter_id = 0
    else:
      self.robot_name = ''
      self.cross = False
      self.last_inter_id = 0
      self.local_inter_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2b().pack(_x.cross, _x.last_inter_id, _x.local_inter_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.cross, _x.last_inter_id, _x.local_inter_id,) = _get_struct_B2b().unpack(str[start:end])
      self.cross = bool(self.cross)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2b().pack(_x.cross, _x.last_inter_id, _x.local_inter_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.cross, _x.last_inter_id, _x.local_inter_id,) = _get_struct_B2b().unpack(str[start:end])
      self.cross = bool(self.cross)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2b = None
def _get_struct_B2b():
    global _struct_B2b
    if _struct_B2b is None:
        _struct_B2b = struct.Struct("<B2b")
    return _struct_B2b
