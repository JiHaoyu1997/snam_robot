# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vpa_robot_decision/RobotInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotInfo(genpy.Message):
  _md5sum = "11867948fae731e82b48e6596c84aa31"
  _type = "vpa_robot_decision/RobotInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string  robot_name
int8    robot_id
float32 robot_a  # Acceleration
float32 robot_v  # Velocity
float32 robot_p  # Position
float32 robot_enter_time
float32 robot_arrive_cp_time
float32 robot_exit_time
"""
  __slots__ = ['robot_name','robot_id','robot_a','robot_v','robot_p','robot_enter_time','robot_arrive_cp_time','robot_exit_time']
  _slot_types = ['string','int8','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_name,robot_id,robot_a,robot_v,robot_p,robot_enter_time,robot_arrive_cp_time,robot_exit_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_name is None:
        self.robot_name = ''
      if self.robot_id is None:
        self.robot_id = 0
      if self.robot_a is None:
        self.robot_a = 0.
      if self.robot_v is None:
        self.robot_v = 0.
      if self.robot_p is None:
        self.robot_p = 0.
      if self.robot_enter_time is None:
        self.robot_enter_time = 0.
      if self.robot_arrive_cp_time is None:
        self.robot_arrive_cp_time = 0.
      if self.robot_exit_time is None:
        self.robot_exit_time = 0.
    else:
      self.robot_name = ''
      self.robot_id = 0
      self.robot_a = 0.
      self.robot_v = 0.
      self.robot_p = 0.
      self.robot_enter_time = 0.
      self.robot_arrive_cp_time = 0.
      self.robot_exit_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b6f().pack(_x.robot_id, _x.robot_a, _x.robot_v, _x.robot_p, _x.robot_enter_time, _x.robot_arrive_cp_time, _x.robot_exit_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.robot_id, _x.robot_a, _x.robot_v, _x.robot_p, _x.robot_enter_time, _x.robot_arrive_cp_time, _x.robot_exit_time,) = _get_struct_b6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b6f().pack(_x.robot_id, _x.robot_a, _x.robot_v, _x.robot_p, _x.robot_enter_time, _x.robot_arrive_cp_time, _x.robot_exit_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.robot_id, _x.robot_a, _x.robot_v, _x.robot_p, _x.robot_enter_time, _x.robot_arrive_cp_time, _x.robot_exit_time,) = _get_struct_b6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b6f = None
def _get_struct_b6f():
    global _struct_b6f
    if _struct_b6f is None:
        _struct_b6f = struct.Struct("<b6f")
    return _struct_b6f
