// Generated by gencpp from file vpa_robot_vision/CrossInfo.msg
// DO NOT EDIT!


#ifndef VPA_ROBOT_VISION_MESSAGE_CROSSINFO_H
#define VPA_ROBOT_VISION_MESSAGE_CROSSINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vpa_robot_vision
{
template <class ContainerAllocator>
struct CrossInfo_
{
  typedef CrossInfo_<ContainerAllocator> Type;

  CrossInfo_()
    : robot_name()
    , cross(false)
    , last_inter_id(0)
    , local_inter_id(0)  {
    }
  CrossInfo_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , cross(false)
    , last_inter_id(0)
    , local_inter_id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_name_type;
  _robot_name_type robot_name;

   typedef uint8_t _cross_type;
  _cross_type cross;

   typedef int8_t _last_inter_id_type;
  _last_inter_id_type last_inter_id;

   typedef int8_t _local_inter_id_type;
  _local_inter_id_type local_inter_id;





  typedef boost::shared_ptr< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CrossInfo_

typedef ::vpa_robot_vision::CrossInfo_<std::allocator<void> > CrossInfo;

typedef boost::shared_ptr< ::vpa_robot_vision::CrossInfo > CrossInfoPtr;
typedef boost::shared_ptr< ::vpa_robot_vision::CrossInfo const> CrossInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vpa_robot_vision::CrossInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vpa_robot_vision::CrossInfo_<ContainerAllocator1> & lhs, const ::vpa_robot_vision::CrossInfo_<ContainerAllocator2> & rhs)
{
  return lhs.robot_name == rhs.robot_name &&
    lhs.cross == rhs.cross &&
    lhs.last_inter_id == rhs.last_inter_id &&
    lhs.local_inter_id == rhs.local_inter_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vpa_robot_vision::CrossInfo_<ContainerAllocator1> & lhs, const ::vpa_robot_vision::CrossInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vpa_robot_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abc28f0d82de76aab08a8f05250b1372";
  }

  static const char* value(const ::vpa_robot_vision::CrossInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabc28f0d82de76aaULL;
  static const uint64_t static_value2 = 0xb08a8f05250b1372ULL;
};

template<class ContainerAllocator>
struct DataType< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vpa_robot_vision/CrossInfo";
  }

  static const char* value(const ::vpa_robot_vision::CrossInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_name         # Name of the robot\n"
"bool cross                # Indicates if the robot has crossed\n"
"int8 last_inter_id       # ID of the last intersection\n"
"int8 local_inter_id      # ID of the current (local) intersection\n"
;
  }

  static const char* value(const ::vpa_robot_vision::CrossInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.cross);
      stream.next(m.last_inter_id);
      stream.next(m.local_inter_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CrossInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vpa_robot_vision::CrossInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vpa_robot_vision::CrossInfo_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_name);
    s << indent << "cross: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cross);
    s << indent << "last_inter_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.last_inter_id);
    s << indent << "local_inter_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.local_inter_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VPA_ROBOT_VISION_MESSAGE_CROSSINFO_H
