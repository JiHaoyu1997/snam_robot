// Generated by gencpp from file vpa_robot_task/AssignTaskResponse.msg
// DO NOT EDIT!


#ifndef VPA_ROBOT_TASK_MESSAGE_ASSIGNTASKRESPONSE_H
#define VPA_ROBOT_TASK_MESSAGE_ASSIGNTASKRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vpa_robot_task
{
template <class ContainerAllocator>
struct AssignTaskResponse_
{
  typedef AssignTaskResponse_<ContainerAllocator> Type;

  AssignTaskResponse_()
    : task_list()  {
    }
  AssignTaskResponse_(const ContainerAllocator& _alloc)
    : task_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _task_list_type;
  _task_list_type task_list;





  typedef boost::shared_ptr< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> const> ConstPtr;

}; // struct AssignTaskResponse_

typedef ::vpa_robot_task::AssignTaskResponse_<std::allocator<void> > AssignTaskResponse;

typedef boost::shared_ptr< ::vpa_robot_task::AssignTaskResponse > AssignTaskResponsePtr;
typedef boost::shared_ptr< ::vpa_robot_task::AssignTaskResponse const> AssignTaskResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator1> & lhs, const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator2> & rhs)
{
  return lhs.task_list == rhs.task_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator1> & lhs, const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vpa_robot_task

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34413843ec972b8746faccaca2ed6038";
  }

  static const char* value(const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34413843ec972b87ULL;
  static const uint64_t static_value2 = 0x46faccaca2ed6038ULL;
};

template<class ContainerAllocator>
struct DataType< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vpa_robot_task/AssignTaskResponse";
  }

  static const char* value(const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[] task_list\n"
;
  }

  static const char* value(const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AssignTaskResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vpa_robot_task::AssignTaskResponse_<ContainerAllocator>& v)
  {
    s << indent << "task_list[]" << std::endl;
    for (size_t i = 0; i < v.task_list.size(); ++i)
    {
      s << indent << "  task_list[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.task_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VPA_ROBOT_TASK_MESSAGE_ASSIGNTASKRESPONSE_H
