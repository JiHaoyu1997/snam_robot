// Generated by gencpp from file vpa_robot_interface/WheelsEncoder.msg
// DO NOT EDIT!


#ifndef VPA_ROBOT_INTERFACE_MESSAGE_WHEELSENCODER_H
#define VPA_ROBOT_INTERFACE_MESSAGE_WHEELSENCODER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace vpa_robot_interface
{
template <class ContainerAllocator>
struct WheelsEncoder_
{
  typedef WheelsEncoder_<ContainerAllocator> Type;

  WheelsEncoder_()
    : header()
    , omega_left(0.0)
    , omega_right(0.0)
    , left_ticks(0)
    , right_ticks(0)  {
    }
  WheelsEncoder_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , omega_left(0.0)
    , omega_right(0.0)
    , left_ticks(0)
    , right_ticks(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _omega_left_type;
  _omega_left_type omega_left;

   typedef float _omega_right_type;
  _omega_right_type omega_right;

   typedef int32_t _left_ticks_type;
  _left_ticks_type left_ticks;

   typedef int32_t _right_ticks_type;
  _right_ticks_type right_ticks;





  typedef boost::shared_ptr< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> const> ConstPtr;

}; // struct WheelsEncoder_

typedef ::vpa_robot_interface::WheelsEncoder_<std::allocator<void> > WheelsEncoder;

typedef boost::shared_ptr< ::vpa_robot_interface::WheelsEncoder > WheelsEncoderPtr;
typedef boost::shared_ptr< ::vpa_robot_interface::WheelsEncoder const> WheelsEncoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator1> & lhs, const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.omega_left == rhs.omega_left &&
    lhs.omega_right == rhs.omega_right &&
    lhs.left_ticks == rhs.left_ticks &&
    lhs.right_ticks == rhs.right_ticks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator1> & lhs, const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vpa_robot_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d20b5ac15310df1d610c29199f12461";
  }

  static const char* value(const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d20b5ac15310df1ULL;
  static const uint64_t static_value2 = 0xd610c29199f12461ULL;
};

template<class ContainerAllocator>
struct DataType< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vpa_robot_interface/WheelsEncoder";
  }

  static const char* value(const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float32 omega_left\n"
"float32 omega_right\n"
"int32 left_ticks\n"
"int32 right_ticks\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.omega_left);
      stream.next(m.omega_right);
      stream.next(m.left_ticks);
      stream.next(m.right_ticks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelsEncoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vpa_robot_interface::WheelsEncoder_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "omega_left: ";
    Printer<float>::stream(s, indent + "  ", v.omega_left);
    s << indent << "omega_right: ";
    Printer<float>::stream(s, indent + "  ", v.omega_right);
    s << indent << "left_ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_ticks);
    s << indent << "right_ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_ticks);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VPA_ROBOT_INTERFACE_MESSAGE_WHEELSENCODER_H
