// Generated by gencpp from file vpa_robot_interface/WheelsCmd.msg
// DO NOT EDIT!


#ifndef VPA_ROBOT_INTERFACE_MESSAGE_WHEELSCMD_H
#define VPA_ROBOT_INTERFACE_MESSAGE_WHEELSCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vpa_robot_interface
{
template <class ContainerAllocator>
struct WheelsCmd_
{
  typedef WheelsCmd_<ContainerAllocator> Type;

  WheelsCmd_()
    : vel_left(0.0)
    , vel_right(0.0)
    , throttle_left(0.0)
    , throttle_right(0.0)  {
    }
  WheelsCmd_(const ContainerAllocator& _alloc)
    : vel_left(0.0)
    , vel_right(0.0)
    , throttle_left(0.0)
    , throttle_right(0.0)  {
  (void)_alloc;
    }



   typedef float _vel_left_type;
  _vel_left_type vel_left;

   typedef float _vel_right_type;
  _vel_right_type vel_right;

   typedef float _throttle_left_type;
  _throttle_left_type throttle_left;

   typedef float _throttle_right_type;
  _throttle_right_type throttle_right;





  typedef boost::shared_ptr< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> const> ConstPtr;

}; // struct WheelsCmd_

typedef ::vpa_robot_interface::WheelsCmd_<std::allocator<void> > WheelsCmd;

typedef boost::shared_ptr< ::vpa_robot_interface::WheelsCmd > WheelsCmdPtr;
typedef boost::shared_ptr< ::vpa_robot_interface::WheelsCmd const> WheelsCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator1> & lhs, const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator2> & rhs)
{
  return lhs.vel_left == rhs.vel_left &&
    lhs.vel_right == rhs.vel_right &&
    lhs.throttle_left == rhs.throttle_left &&
    lhs.throttle_right == rhs.throttle_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator1> & lhs, const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vpa_robot_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55b8120aed29e6f14c585476240d3cac";
  }

  static const char* value(const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55b8120aed29e6f1ULL;
  static const uint64_t static_value2 = 0x4c585476240d3cacULL;
};

template<class ContainerAllocator>
struct DataType< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vpa_robot_interface/WheelsCmd";
  }

  static const char* value(const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vel_left\n"
"float32 vel_right\n"
"float32 throttle_left\n"
"float32 throttle_right\n"
;
  }

  static const char* value(const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_left);
      stream.next(m.vel_right);
      stream.next(m.throttle_left);
      stream.next(m.throttle_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelsCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vpa_robot_interface::WheelsCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vpa_robot_interface::WheelsCmd_<ContainerAllocator>& v)
  {
    s << indent << "vel_left: ";
    Printer<float>::stream(s, indent + "  ", v.vel_left);
    s << indent << "vel_right: ";
    Printer<float>::stream(s, indent + "  ", v.vel_right);
    s << indent << "throttle_left: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_left);
    s << indent << "throttle_right: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VPA_ROBOT_INTERFACE_MESSAGE_WHEELSCMD_H
