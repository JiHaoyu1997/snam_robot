// Generated by gencpp from file vpa_robot_decision/RobotInterMngRequest.msg
// DO NOT EDIT!


#ifndef VPA_ROBOT_DECISION_MESSAGE_ROBOTINTERMNGREQUEST_H
#define VPA_ROBOT_DECISION_MESSAGE_ROBOTINTERMNGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace vpa_robot_decision
{
template <class ContainerAllocator>
struct RobotInterMngRequest_
{
  typedef RobotInterMngRequest_<ContainerAllocator> Type;

  RobotInterMngRequest_()
    : header()
    , robot_name()
    , from_inter_index(0)
    , to_inter_index(0)  {
    }
  RobotInterMngRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot_name(_alloc)
    , from_inter_index(0)
    , to_inter_index(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_name_type;
  _robot_name_type robot_name;

   typedef int8_t _from_inter_index_type;
  _from_inter_index_type from_inter_index;

   typedef int8_t _to_inter_index_type;
  _to_inter_index_type to_inter_index;





  typedef boost::shared_ptr< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInterMngRequest_

typedef ::vpa_robot_decision::RobotInterMngRequest_<std::allocator<void> > RobotInterMngRequest;

typedef boost::shared_ptr< ::vpa_robot_decision::RobotInterMngRequest > RobotInterMngRequestPtr;
typedef boost::shared_ptr< ::vpa_robot_decision::RobotInterMngRequest const> RobotInterMngRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator1> & lhs, const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.robot_name == rhs.robot_name &&
    lhs.from_inter_index == rhs.from_inter_index &&
    lhs.to_inter_index == rhs.to_inter_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator1> & lhs, const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vpa_robot_decision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7182a0858f9e56c621c0284dc340d19d";
  }

  static const char* value(const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7182a0858f9e56c6ULL;
  static const uint64_t static_value2 = 0x21c0284dc340d19dULL;
};

template<class ContainerAllocator>
struct DataType< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vpa_robot_decision/RobotInterMngRequest";
  }

  static const char* value(const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string robot_name\n"
"int8 from_inter_index\n"
"int8 to_inter_index\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot_name);
      stream.next(m.from_inter_index);
      stream.next(m.to_inter_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInterMngRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vpa_robot_decision::RobotInterMngRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_name);
    s << indent << "from_inter_index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.from_inter_index);
    s << indent << "to_inter_index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.to_inter_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VPA_ROBOT_DECISION_MESSAGE_ROBOTINTERMNGREQUEST_H
