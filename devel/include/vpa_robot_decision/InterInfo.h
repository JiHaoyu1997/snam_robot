// Generated by gencpp from file vpa_robot_decision/InterInfo.msg
// DO NOT EDIT!


#ifndef VPA_ROBOT_DECISION_MESSAGE_INTERINFO_H
#define VPA_ROBOT_DECISION_MESSAGE_INTERINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vpa_robot_decision/RobotInfo.h>

namespace vpa_robot_decision
{
template <class ContainerAllocator>
struct InterInfo_
{
  typedef InterInfo_<ContainerAllocator> Type;

  InterInfo_()
    : inter_id(0)
    , robot_id_list()
    , robot_info()  {
    }
  InterInfo_(const ContainerAllocator& _alloc)
    : inter_id(0)
    , robot_id_list(_alloc)
    , robot_info(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _inter_id_type;
  _inter_id_type inter_id;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _robot_id_list_type;
  _robot_id_list_type robot_id_list;

   typedef std::vector< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >> _robot_info_type;
  _robot_info_type robot_info;





  typedef boost::shared_ptr< ::vpa_robot_decision::InterInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vpa_robot_decision::InterInfo_<ContainerAllocator> const> ConstPtr;

}; // struct InterInfo_

typedef ::vpa_robot_decision::InterInfo_<std::allocator<void> > InterInfo;

typedef boost::shared_ptr< ::vpa_robot_decision::InterInfo > InterInfoPtr;
typedef boost::shared_ptr< ::vpa_robot_decision::InterInfo const> InterInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vpa_robot_decision::InterInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vpa_robot_decision::InterInfo_<ContainerAllocator1> & lhs, const ::vpa_robot_decision::InterInfo_<ContainerAllocator2> & rhs)
{
  return lhs.inter_id == rhs.inter_id &&
    lhs.robot_id_list == rhs.robot_id_list &&
    lhs.robot_info == rhs.robot_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vpa_robot_decision::InterInfo_<ContainerAllocator1> & lhs, const ::vpa_robot_decision::InterInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vpa_robot_decision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_decision::InterInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_decision::InterInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_decision::InterInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a651223f4498c1bc66c36b76f2257d3e";
  }

  static const char* value(const ::vpa_robot_decision::InterInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa651223f4498c1bcULL;
  static const uint64_t static_value2 = 0x66c36b76f2257d3eULL;
};

template<class ContainerAllocator>
struct DataType< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vpa_robot_decision/InterInfo";
  }

  static const char* value(const ::vpa_robot_decision::InterInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8            inter_id        # Intersection ID\n"
"int8[]          robot_id_list   # List of robot names or IDs\n"
"RobotInfo[]     robot_info      # List of RobotInfo instances\n"
"================================================================================\n"
"MSG: vpa_robot_decision/RobotInfo\n"
"string  robot_name\n"
"int8    robot_id\n"
"float32 robot_a  # Acceleration\n"
"float32 robot_v  # Velocity\n"
"float32 robot_p  # Position\n"
"float32 robot_enter_time\n"
"float32 robot_arrive_cp_time\n"
"float32 robot_exit_time\n"
;
  }

  static const char* value(const ::vpa_robot_decision::InterInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inter_id);
      stream.next(m.robot_id_list);
      stream.next(m.robot_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InterInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vpa_robot_decision::InterInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vpa_robot_decision::InterInfo_<ContainerAllocator>& v)
  {
    s << indent << "inter_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.inter_id);
    s << indent << "robot_id_list[]" << std::endl;
    for (size_t i = 0; i < v.robot_id_list.size(); ++i)
    {
      s << indent << "  robot_id_list[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.robot_id_list[i]);
    }
    s << indent << "robot_info[]" << std::endl;
    for (size_t i = 0; i < v.robot_info.size(); ++i)
    {
      s << indent << "  robot_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.robot_info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VPA_ROBOT_DECISION_MESSAGE_INTERINFO_H
