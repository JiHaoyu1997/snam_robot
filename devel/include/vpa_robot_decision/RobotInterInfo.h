// Generated by gencpp from file vpa_robot_decision/RobotInterInfo.msg
// DO NOT EDIT!


#ifndef VPA_ROBOT_DECISION_MESSAGE_ROBOTINTERINFO_H
#define VPA_ROBOT_DECISION_MESSAGE_ROBOTINTERINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vpa_robot_decision
{
template <class ContainerAllocator>
struct RobotInterInfo_
{
  typedef RobotInterInfo_<ContainerAllocator> Type;

  RobotInterInfo_()
    : inter_1()
    , inter_2()
    , inter_3()
    , inter_4()
    , inter_5()  {
    }
  RobotInterInfo_(const ContainerAllocator& _alloc)
    : inter_1(_alloc)
    , inter_2(_alloc)
    , inter_3(_alloc)
    , inter_4(_alloc)
    , inter_5(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _inter_1_type;
  _inter_1_type inter_1;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _inter_2_type;
  _inter_2_type inter_2;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _inter_3_type;
  _inter_3_type inter_3;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _inter_4_type;
  _inter_4_type inter_4;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _inter_5_type;
  _inter_5_type inter_5;





  typedef boost::shared_ptr< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInterInfo_

typedef ::vpa_robot_decision::RobotInterInfo_<std::allocator<void> > RobotInterInfo;

typedef boost::shared_ptr< ::vpa_robot_decision::RobotInterInfo > RobotInterInfoPtr;
typedef boost::shared_ptr< ::vpa_robot_decision::RobotInterInfo const> RobotInterInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator1> & lhs, const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator2> & rhs)
{
  return lhs.inter_1 == rhs.inter_1 &&
    lhs.inter_2 == rhs.inter_2 &&
    lhs.inter_3 == rhs.inter_3 &&
    lhs.inter_4 == rhs.inter_4 &&
    lhs.inter_5 == rhs.inter_5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator1> & lhs, const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vpa_robot_decision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7e2780d75dbdc968ce987e67cfdc2df";
  }

  static const char* value(const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7e2780d75dbdc96ULL;
  static const uint64_t static_value2 = 0x8ce987e67cfdc2dfULL;
};

template<class ContainerAllocator>
struct DataType< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vpa_robot_decision/RobotInterInfo";
  }

  static const char* value(const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# RobotInterInfo.msg\n"
"\n"
"int8[] inter_1\n"
"int8[] inter_2\n"
"int8[] inter_3\n"
"int8[] inter_4\n"
"int8[] inter_5\n"
;
  }

  static const char* value(const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inter_1);
      stream.next(m.inter_2);
      stream.next(m.inter_3);
      stream.next(m.inter_4);
      stream.next(m.inter_5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInterInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vpa_robot_decision::RobotInterInfo_<ContainerAllocator>& v)
  {
    s << indent << "inter_1[]" << std::endl;
    for (size_t i = 0; i < v.inter_1.size(); ++i)
    {
      s << indent << "  inter_1[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.inter_1[i]);
    }
    s << indent << "inter_2[]" << std::endl;
    for (size_t i = 0; i < v.inter_2.size(); ++i)
    {
      s << indent << "  inter_2[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.inter_2[i]);
    }
    s << indent << "inter_3[]" << std::endl;
    for (size_t i = 0; i < v.inter_3.size(); ++i)
    {
      s << indent << "  inter_3[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.inter_3[i]);
    }
    s << indent << "inter_4[]" << std::endl;
    for (size_t i = 0; i < v.inter_4.size(); ++i)
    {
      s << indent << "  inter_4[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.inter_4[i]);
    }
    s << indent << "inter_5[]" << std::endl;
    for (size_t i = 0; i < v.inter_5.size(); ++i)
    {
      s << indent << "  inter_5[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.inter_5[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VPA_ROBOT_DECISION_MESSAGE_ROBOTINTERINFO_H
