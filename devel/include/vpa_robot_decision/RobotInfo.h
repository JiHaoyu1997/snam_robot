// Generated by gencpp from file vpa_robot_decision/RobotInfo.msg
// DO NOT EDIT!


#ifndef VPA_ROBOT_DECISION_MESSAGE_ROBOTINFO_H
#define VPA_ROBOT_DECISION_MESSAGE_ROBOTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vpa_robot_decision
{
template <class ContainerAllocator>
struct RobotInfo_
{
  typedef RobotInfo_<ContainerAllocator> Type;

  RobotInfo_()
    : robot_name()
    , robot_id(0)
    , robot_a(0.0)
    , robot_v(0.0)
    , robot_p(0.0)
    , robot_enter_time(0.0)
    , robot_arrive_cp_time(0.0)
    , robot_exit_time(0.0)  {
    }
  RobotInfo_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , robot_id(0)
    , robot_a(0.0)
    , robot_v(0.0)
    , robot_p(0.0)
    , robot_enter_time(0.0)
    , robot_arrive_cp_time(0.0)
    , robot_exit_time(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_name_type;
  _robot_name_type robot_name;

   typedef int8_t _robot_id_type;
  _robot_id_type robot_id;

   typedef float _robot_a_type;
  _robot_a_type robot_a;

   typedef float _robot_v_type;
  _robot_v_type robot_v;

   typedef float _robot_p_type;
  _robot_p_type robot_p;

   typedef float _robot_enter_time_type;
  _robot_enter_time_type robot_enter_time;

   typedef float _robot_arrive_cp_time_type;
  _robot_arrive_cp_time_type robot_arrive_cp_time;

   typedef float _robot_exit_time_type;
  _robot_exit_time_type robot_exit_time;





  typedef boost::shared_ptr< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInfo_

typedef ::vpa_robot_decision::RobotInfo_<std::allocator<void> > RobotInfo;

typedef boost::shared_ptr< ::vpa_robot_decision::RobotInfo > RobotInfoPtr;
typedef boost::shared_ptr< ::vpa_robot_decision::RobotInfo const> RobotInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vpa_robot_decision::RobotInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vpa_robot_decision::RobotInfo_<ContainerAllocator1> & lhs, const ::vpa_robot_decision::RobotInfo_<ContainerAllocator2> & rhs)
{
  return lhs.robot_name == rhs.robot_name &&
    lhs.robot_id == rhs.robot_id &&
    lhs.robot_a == rhs.robot_a &&
    lhs.robot_v == rhs.robot_v &&
    lhs.robot_p == rhs.robot_p &&
    lhs.robot_enter_time == rhs.robot_enter_time &&
    lhs.robot_arrive_cp_time == rhs.robot_arrive_cp_time &&
    lhs.robot_exit_time == rhs.robot_exit_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vpa_robot_decision::RobotInfo_<ContainerAllocator1> & lhs, const ::vpa_robot_decision::RobotInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vpa_robot_decision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11867948fae731e82b48e6596c84aa31";
  }

  static const char* value(const ::vpa_robot_decision::RobotInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11867948fae731e8ULL;
  static const uint64_t static_value2 = 0x2b48e6596c84aa31ULL;
};

template<class ContainerAllocator>
struct DataType< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vpa_robot_decision/RobotInfo";
  }

  static const char* value(const ::vpa_robot_decision::RobotInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  robot_name\n"
"int8    robot_id\n"
"float32 robot_a  # Acceleration\n"
"float32 robot_v  # Velocity\n"
"float32 robot_p  # Position\n"
"float32 robot_enter_time\n"
"float32 robot_arrive_cp_time\n"
"float32 robot_exit_time\n"
;
  }

  static const char* value(const ::vpa_robot_decision::RobotInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.robot_id);
      stream.next(m.robot_a);
      stream.next(m.robot_v);
      stream.next(m.robot_p);
      stream.next(m.robot_enter_time);
      stream.next(m.robot_arrive_cp_time);
      stream.next(m.robot_exit_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vpa_robot_decision::RobotInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vpa_robot_decision::RobotInfo_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_name);
    s << indent << "robot_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "robot_a: ";
    Printer<float>::stream(s, indent + "  ", v.robot_a);
    s << indent << "robot_v: ";
    Printer<float>::stream(s, indent + "  ", v.robot_v);
    s << indent << "robot_p: ";
    Printer<float>::stream(s, indent + "  ", v.robot_p);
    s << indent << "robot_enter_time: ";
    Printer<float>::stream(s, indent + "  ", v.robot_enter_time);
    s << indent << "robot_arrive_cp_time: ";
    Printer<float>::stream(s, indent + "  ", v.robot_arrive_cp_time);
    s << indent << "robot_exit_time: ";
    Printer<float>::stream(s, indent + "  ", v.robot_exit_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VPA_ROBOT_DECISION_MESSAGE_ROBOTINFO_H
